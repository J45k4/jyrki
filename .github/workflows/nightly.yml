name: Nightly Build and Release

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at 00:00 UTC every day
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master

permissions:
  contents: write  # Required for creating releases

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.check.outputs.changes }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to ensure all branches and tags are available

      - name: Check for Changes in the Last 24 Hours
        id: check
        run: |
          since=$(date -u -d "24 hours ago" +"%Y-%m-%dT%H:%M:%SZ")
          echo "Checking for commits since $since..."
          commits=$(git log --since="$since" --pretty=oneline)
          if [ -z "$commits" ]; then
            echo "No changes detected."
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected."
            echo "changes=true" >> $GITHUB_OUTPUT

  build:
    needs: check_changes
    if: needs.check_changes.outputs.changes == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache Cargo Registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo Build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Set Up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: -A unused_imports

      - name: Build
        run: cargo build --release

      - name: Test
        run: cargo test --release

      - name: Package Binary
        id: package
        shell: bash
        run: |
          # Determine the OS
          case "${{ runner.os }}" in
            Windows)
              BINARY_NAME="puppycoder.exe"
              ARCHIVE_NAME="puppycoder-nightly-windows.tar.gz"
              ;;
            macOS)
              BINARY_NAME="puppycoder"
              ARCHIVE_NAME="puppycoder-nightly-macos.tar.gz"
              ;;
            Linux)
              BINARY_NAME="puppycoder"
              ARCHIVE_NAME="puppycoder-nightly-linux.tar.gz"
              ;;
            *)
              echo "Unsupported OS: ${{ runner.os }}" >&2
              exit 1
              ;;
          esac
      
          # Package the binary
          tar -czf "$ARCHIVE_NAME" -C target/release "$BINARY_NAME"
      
          # Output the artifact path
          echo "artifact_path=$ARCHIVE_NAME" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: puppycoder-${{ matrix.os }}
          path: ${{ steps.package.outputs.artifact_path }}

  release:
    needs: build
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Set Release Date
        id: set_date
        run: echo "RELEASE_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV

      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: puppycoder-ubuntu-latest
          path: artifacts/linux/

      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: puppycoder-windows-latest
          path: artifacts/windows/

      - name: Download macOS Artifact
        uses: actions/download-artifact@v3
        with:
          name: puppycoder-macos-latest
          path: artifacts/macos/

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: nightly-${{ env.RELEASE_DATE }}
          name: Nightly Build ${{ env.RELEASE_DATE }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (Linux)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: nightly-${{ env.RELEASE_DATE }}
          name: puppycoder-nightly-${{ env.RELEASE_DATE }}-linux.tar.gz
          files: puppycoder-nightly-ubuntu-latest.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (Windows)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: nightly-${{ env.RELEASE_DATE }}
          name: puppycoder-nightly-${{ env.RELEASE_DATE }}-windows.tar.gz
          files: puppycoder-nightly-windows-latest.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (macOS)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: nightly-${{ env.RELEASE_DATE }}
          name: puppycoder-nightly-${{ env.RELEASE_DATE }}-macos.tar.gz
          files: puppycoder-nightly-macos-latest.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}