name: Rust CI/CD

on:
  push:
    branches:
      - master
    tags:
      - '*'   # Trigger on all tag pushes
  pull_request:
    branches:
      - master

permissions:
  contents: write  # Required for creating releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # 1. Checkout the repository with full history
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to ensure all branches and tags are available

      # 2. Set up Rust toolchain
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: -A unused_imports

      # 3. Build the project in release mode
      - name: Build
        run: cargo build --release

      # 4. Run tests
      - name: Test
        run: cargo test --release

      # 5. Package the binary
      - name: Package Binary
        id: package
        run: |
          # Determine the binary name and extension based on OS
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME="puppycoder.exe"
            ARCHIVE_NAME="puppycoder-${{ github.ref_name }}-windows.zip"
            Compress_Command="Compress-Archive -Path target/release/${BINARY_NAME} -DestinationPath ${ARCHIVE_NAME}"
            pwsh -Command $Compress_Command
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            BINARY_NAME="puppycoder"
            ARCHIVE_NAME="puppycoder-${{ github.ref_name }}-macos.tar.gz"
            tar -czf ${ARCHIVE_NAME} -C target/release ${BINARY_NAME}
          else
            BINARY_NAME="puppycoder"
            ARCHIVE_NAME="puppycoder-${{ github.ref_name }}-linux.tar.gz"
            tar -czf ${ARCHIVE_NAME} -C target/release ${BINARY_NAME}
          fi

          # Verify that the archive exists
          if [ ! -f "${ARCHIVE_NAME}" ]; then
            echo "Error: Archive ${ARCHIVE_NAME} not found!"
            exit 1
          fi

          # Set the artifact path
          echo "artifact_path=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      # 6. Upload the packaged binary as an artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: puppycoder-${{ matrix.os }}
          path: ${{ steps.package.outputs.artifact_path }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')  # Corrected condition
    steps:
      # 1. Checkout the repository (optional, depending on the release action used)
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Download all artifacts
      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: puppycoder-ubuntu-latest
          path: artifacts/linux/

      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: puppycoder-windows-latest
          path: artifacts/windows/

      - name: Download macOS Artifact
        uses: actions/download-artifact@v3
        with:
          name: puppycoder-macos-latest
          path: artifacts/macos/

      # 3. Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 4. Upload Release Assets
      - name: Upload Release Asset (Linux)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: puppycoder-${{ github.ref_name }}-linux.tar.gz
          path: artifacts/linux/puppycoder-${{ github.ref_name }}-linux.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (Windows)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: puppycoder-${{ github.ref_name }}-windows.zip
          path: artifacts/windows/puppycoder-${{ github.ref_name }}-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (macOS)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: puppycoder-${{ github.ref_name }}-macos.tar.gz
          path: artifacts/macos/puppycoder-${{ github.ref_name }}-macos.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
